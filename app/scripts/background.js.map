{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,UAAA,OAAO,EAAI;AAChD,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACzD,CAAC,CAAC;;AAEH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAA,KAAK,EAAI;AACzC,QAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CAC/B,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCH,IAAM,QAAQ,GAAG,qDAAqD,CAAC;AACvE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAC,EAAE,EAAE,GAAG,EAAK;AAC7C,MAAI,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACvD,QAAI,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;2BACP,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;;;;UAAnC,GAAG;UAAE,QAAQ;;AACpB,UAAM,OAAO,GAAG,QAAQ,CACrB,KAAK,CAAC,GAAG,CAAC,CACV,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK;eAAK,GAAG,CAAC,GAAG,MAAA,CAAP,GAAG,qBAAQ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;OAAA,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;;AAEnE,UAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AACvB,eAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;OAC7B,MAAM;AACL,eAAO;OACR;AACD,UAAM,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,6BAAI,OAAO,CAAC,OAAO,EAAE,GAChD,GAAG,CAAC,UAAC,MAAM;eAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;OAAA,CAAC,CACjC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAEf,aAAO,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACpC,aAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;KACzC;GACF;CACF,CAAC,CAAC","file":"background.js","sourcesContent":["'use strict';\n\nchrome.runtime.onInstalled.addListener(details => {\n  console.log('previousVersion', details.previousVersion);\n});\n\nchrome.tabs.onUpdated.addListener(tabId => {\n  chrome.pageAction.show(tabId);\n});\n//\n//chrome.webRequest.onBeforeRequest.addListener(request => {\n//  if (request.url.indexOf('?') !== -1) {\n//    const [url, _payload] = request.url.split('?');\n//\n//    const payload = _payload\n//      .split('&')\n//      .reduce((obj, param) => {\n//        const [key, ...value] = param.split('=');\n//        obj.set(key, value.join('='));\n//        return obj;\n//      }, new Map());\n//\n//    if (!payload.has('tbs')) {\n//      payload.set('tbs', 'qdr:y');\n//    } else {\n//      return;\n//    }\n//    console.log('payload', payload);\n//\n//\n//    const payloadString = [...payload.entries()]\n//      .map((params) => params.join('='))\n//      .join('&');\n//\n//    const destination = url + '?' + payloadString;\n//    console.log('request.url.length', request.url.length);\n//    console.log('destination.length', destination.length);\n//    console.log('request.url', request.url);\n//    console.log('destination', destination);\n//\n//    return {redirectUrl: destination};\n//  }\n//}, {urls: ['*://*.google.com/search*']}, ['blocking']);\nconst reGoogle = /^https?:\\/\\/(?:www\\.)?google\\.com\\/(?:webhp|search)/;\nchrome.tabs.onUpdated.addListener((id, tab) => {\n  if (tab.hasOwnProperty('url') && reGoogle.test(tab.url)) {\n    if (tab.url.indexOf('#') !== -1) {\n      const [url, _payload] = tab.url.split('#');\n      const payload = _payload\n        .split('&')\n        .reduce((obj, param) => obj.set(...param.split('=')), new Map());\n\n      if (!payload.has('tbs')) {\n        payload.set('tbs', 'qdr:y');\n      } else {\n        return;\n      }\n      const destination = url + '#' + [...payload.entries()]\n          .map((params) => params.join('='))\n          .join('&');\n\n      console.log('tab.url    ', tab.url);\n      console.log('destination', destination);\n    }\n  }\n});"]}