{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;AAIb,IAAM,QAAQ,GAAG,qDAAqD,CAAC;;AAEvE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAC,EAAE,EAAE,GAAG,EAAK;;;AAG7C,MAAI,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;;AAEvD,QAAI,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;2BACP,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;;;;UAAnC,GAAG;UAAE,QAAQ;;;AAGpB,UAAM,OAAO,GAAG,QAAQ,CACrB,KAAK,CAAC,GAAG,CAAC,CACV,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK;eAAK,GAAG,CAAC,GAAG,MAAA,CAAP,GAAG,qBAAQ,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;OAAA,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;;;AAGnE,UAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;AACjE,cAAM,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;;;;;;AAO3B,YAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;AAC7C,iBAAO;SACR,MAAM;AACL,iBAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC7B;;;AAGD,YAAM,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,6BAAI,OAAO,CAAC,OAAO,EAAE,GAChD,GAAG,CAAC,UAAC,MAAM;iBAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;SAAA,CAAC,CACjC,IAAI,CAAC,GAAG,CAAC,CAAC;;;AAGf,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAC,GAAG,EAAE,WAAW,EAAC,CAAC,CAAC;OAC5C;KAEF;GACF;CACF,CAAC,CAAC","file":"background.js","sourcesContent":["'use strict';\n\n// match http{s,}://{www.,}google.com/{webhp,search}*\n// ie https://www.google.com/webhp\nconst reGoogle = /^https?:\\/\\/(?:www\\.)?google\\.com\\/(?:webhp|search)/;\n\nchrome.tabs.onUpdated.addListener((id, tab) => {\n\n  // tab.url only exists IF url is changed.\n  if (tab.hasOwnProperty('url') && reGoogle.test(tab.url)) {\n    // IF url has a query string.\n    if (tab.url.indexOf('#') !== -1) {\n      const [url, _payload] = tab.url.split('#');\n\n      // parse payload into `Map` object\n      const payload = _payload\n        .split('&')\n        .reduce((obj, param) => obj.set(...param.split('=')), new Map());\n\n      // If `q` contains ubuntu\n      if (payload.has('q') && payload.get('q').indexOf('ubuntu') !== -1) {\n        chrome.pageAction.show(id);\n\n        /*\n         * Payload param `tbas=0` means filter \"all time\"; allowing user to\n         * forcefully override this extension.\n         * */\n        // IF has date filter, exit.\n        if (payload.has('tbs') || payload.has('tbas')) {\n          return;\n        } else {\n          payload.set('tbs', 'qdr:y');\n        }\n\n        // compile the destination url with filter parameter.\n        const destination = url + '#' + [...payload.entries()]\n            .map((params) => params.join('='))\n            .join('&');\n\n        // Update the tab with new url.\n        chrome.tabs.update(id, {url: destination});\n      }\n\n    }\n  }\n});"]}